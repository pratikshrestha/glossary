<?php
/*
Plugin Name: OP Glossary Plugin
Description: Creates a glossary with custom post type. This is in its initial phase of development.
Author: Outpace
Author URI: https://pratik-shrestha.com.np
Version: 1.0
*/

/**
 * The function registers a custom post type called "Glossary Term" with specific labels, supports for
 * title and editor, and a custom slug for the rewrite.
 */
function op_glossary_register_post_type() {
    $labels = array(
        'name'               => esc_html__( 'Glossary Terms', 'op-glossary' ),
        'singular_name'      => esc_html__( 'Glossary Term', 'op-glossary' ),
        'add_new'            => esc_html__( 'Add New', 'op-glossary' ),
        'add_new_item'       => esc_html__( 'Add New Glossary Term', 'op-glossary' ),
        'edit_item'          => esc_html__( 'Edit Glossary Term', 'op-glossary' ),
        'new_item'           => esc_html__( 'New Glossary Term', 'op-glossary' ),
        'view_item'          => esc_html__( 'View Glossary Term', 'op-glossary' ),
        'search_items'       => esc_html__( 'Search Glossary Terms', 'op-glossary' ),
        'not_found'          => esc_html__( 'No glossary terms found', 'op-glossary' ),
        'not_found_in_trash' => esc_html__( 'No glossary terms found in Trash', 'op-glossary' ),
    );

    $args = array(
        'labels'      => $labels,
        'public'      => true,
        'has_archive' => false,
        'rewrite'     => array( 'slug' => 'what-is' ),
        'supports'    => array( 'title', 'editor' ),
    );

    register_post_type( 'op_glossary_term', $args );

    // Custom Taxonomy Labels
    $taxonomy_labels = array(
        'name'              => esc_html__( 'Categories', 'op-glossary' ),
        'singular_name'     => esc_html__( 'Category', 'op-glossary' ),
        'search_items'      => esc_html__( 'Search Categories', 'op-glossary' ),
        'all_items'         => esc_html__( 'All Categories', 'op-glossary' ),
        'parent_item'       => esc_html__( 'Parent Category', 'op-glossary' ),
        'parent_item_colon' => esc_html__( 'Parent Category:', 'op-glossary' ),
        'edit_item'         => esc_html__( 'Edit Category', 'op-glossary' ),
        'update_item'       => esc_html__( 'Update Category', 'op-glossary' ),
        'add_new_item'      => esc_html__( 'Add New Category', 'op-glossary' ),
        'new_item_name'     => esc_html__( 'New Category Name', 'op-glossary' ),
        'menu_name'         => esc_html__( 'Categories', 'op-glossary' ),
    );

    // Custom Taxonomy Arguments
    $taxonomy_args = array(
        'hierarchical'      => true,
        'labels'            => $taxonomy_labels,
        'show_ui'           => true,
        'query_var'         => true,
        'rewrite'           => array( 'slug' => 'glossary-category' ),
    );

    // Register Custom Taxonomy
    register_taxonomy( 'op_glossary_category', array( 'op_glossary_term' ), $taxonomy_args );
}
add_action( 'init', 'op_glossary_register_post_type' );

/**
 * The function `op_glossary_enqueue_styles` registers and enqueues a CSS file for a WordPress plugin
 * called "op-glossary" with a dynamically generated version number based on the file's modification
 * time.
 */
function op_glossary_enqueue_styles() {
    $styles_file = 'assets/css/styles.css';
    $styles_path = plugin_dir_path(__FILE__) . $styles_file;
    $styles_url = plugin_dir_url(__FILE__) . $styles_file;
    $styles_version = filemtime($styles_path); // Get file modification time

    wp_register_style( 'op-glossary-styles', $styles_url, array(), $styles_version );
}
add_action('wp_enqueue_scripts', 'op_glossary_enqueue_styles');

/**
 * The op_glossary_shortcode function is a PHP shortcode that generates a glossary with pagination
 * based on the first letter of the glossary terms.
 * 
 * @param atts The `` parameter in the `op_glossary_shortcode` function is an array of attributes
 * passed to the shortcode when it is used in a WordPress post or page. These attributes can be used to
 * customize the behavior or appearance of the shortcode output. However, in the provided code, the `$
 * 
 * @return The function `op_glossary_shortcode` is returning the HTML content generated by the
 * function.
 */
function op_glossary_shortcode( $atts ) {
    // Extract shortcode attributes
    $atts = shortcode_atts(array(
        'categories' => '',
        'limit'      => -1,
    ), $atts);

    // Convert comma-separated categories to an array
    $categories = explode( ',', $atts['categories'] );
    $categories = array_map( 'trim', $categories );

    // Retrieve posts based on shortcode attributes
    $args = array(
        'post_type'      => 'op_glossary_term',
        'posts_per_page' => intval($atts['limit']),
        'orderby'        => 'title',
        'order'          => 'ASC',
    );

    if ( ! empty( $atts['categories'] ) ) {
        $args['tax_query'] = array(
            array(
                'taxonomy' => 'op_glossary_category',
                'field' => is_numeric($categories[0]) ? 'term_id' : 'slug',
                'terms' => $categories,
            ),
        );
    }
    $selected_letter = isset( $_GET['op-glossary-pagination'] ) ? sanitize_text_field( $_GET['op-glossary-pagination'] ) : 'A';
    
    if ( isset( $_GET['op-glossary-pagination'] ) ) {
        $args['starts_with'] = $selected_letter;
    }
    
    if ( isset( $_GET['op_glossary_search'] ) ) {
        $args['s'] = $_GET['op_glossary_search'];
    }
    
    ob_start();
    wp_enqueue_style( 'op-glossary-styles' );
    echo '<div class="op-glossary">';
    ?>

    <form method="get">
        <input type="text" name="op_glossary_search" class="w-100 border-0" placeholder="<?php echo isset( $_GET['op_glossary_search'] ) ? esc_attr( $_GET['op_glossary_search'] ) : 'Search for...';?> "/>
		<input type="submit" name="search" value="Search" class="btn btn-cta"/>
	</form>

    <nav class="op-glossary-pagination">
        <ul class="op-glossary-pagination-list">
            <?php
            $first_letters_array = op_glossary_first_letters_of_titles( $args );

            // Generate pagination list with first letters
            foreach ( $first_letters_array as $first_letter ) {
                $active_class = ( $first_letter === $selected_letter ) ? 'active' : '';
                $query_arg    = http_build_query( array( 'op-glossary-pagination' => $first_letter ) );
                
                echo '<li class="' . $active_class . '"><a href="?' . esc_attr( $query_arg ) . '">' . esc_html( $first_letter ) . '</a></li>';
            }
            ?>
        </ul>
    </nav>
    <?php

   $query = new WP_Query( $args );

    if ($query->have_posts()) {
        echo '<dl class="op-glossary-list">';
        while ($query->have_posts()) {
            $query->the_post();
            //echo '<li>';
            echo '<dt><a href="' . esc_url( get_permalink() ) . '">' . get_the_title() . '</a>&nbsp</dt>';
            echo '<dd>' . get_the_content() . '</dd>';
            //echo '</li>';
        }
        echo '</dl>';
    } else {
        echo 'No glossary terms found.';
    }

    wp_reset_postdata();
    
    echo '</div>';
    return ob_get_clean();
}
add_shortcode( 'op-glossary', 'op_glossary_shortcode' );

/**
 * The function retrieves the first letters of the titles of all glossary terms in WordPress and
 * returns them as an array.
 * 
 * @return an array of the first letters of the titles of all the posts of the 'glossary_term' post
 * type.
 */
function op_glossary_first_letters_of_titles( $args ) {
    $first_letters = array();
    
    $args['fields'] = 'ids';

    unset( $args['starts_with'], $args['s'] );
    
    $query = new WP_Query( $args );

    if ( $query->have_posts() ) {
        foreach ( $query->posts as $post_id ) {
            $title = get_the_title( $post_id );
            $first_letter = strtoupper( substr( $title, 0, 1 ) ); // Convert to uppercase
            if ( ! in_array( $first_letter, $first_letters ) ) {
                $first_letters[] = $first_letter;
            }
        }
    }

    asort( $first_letters );

    return $first_letters;
}

/**
 * Modify the SQL WHERE clause for WordPress queries to search for posts with titles
 * that start with a specific value.
 *
 * @param string   $where The SQL WHERE clause.
 * @param WP_Query $query The current WP_Query instance.
 * @return string The modified SQL WHERE clause.
 */
function op_glossary_posts_where( $where, $query ) {
    global $wpdb;

    $starts_with = esc_sql( $query->get( 'starts_with' ) );

    if ( $starts_with ) {
        $where .= " AND LOWER($wpdb->posts.post_title) LIKE LOWER('$starts_with%')";
    }

    return $where;
}
add_filter( 'posts_where', 'op_glossary_posts_where', 10, 2 );

/**
 * Generates schema.org markup for single glossary page.
 */
function op_glossary_footer_schema() {
    $id = get_queried_object_id();

    if ( 'op_glossary_term' != get_post_type( $id ) ) {
        return;
    }
    
    // Add Course data to the schema_data array
    $schema_data[] = [
        "@context" => "https://schema.org",
        "@type" => "DefinedTerm",
        "name" => get_the_title( $id ),
        "url" => get_permalink( $id ),
        "description" => wp_strip_all_tags( get_post_field('post_content', $id ) ),
    ];

    // Check if there is any schema data to output
    if ( ! empty( $schema_data ) ) {
        // Output the schema data as JSON within a <script> tag
        echo '<script type="application/ld+json">' . json_encode( $schema_data, JSON_PRETTY_PRINT ) . '</script>';
    }
}
add_action( 'wp_footer', 'op_glossary_footer_schema', 10 );